@page "/login"
@inject IJSRuntime jsRunn
@inject HttpClient httpClient
@inject AuthenticationStateProvider authStateProvider
@inject IAuthenticationService _authService
@inject ILocalStorageService _storageService
@using System.Text.Json
@using Newtonsoft.Json.Linq
@using Blazored.LocalStorage;

<PageTitle>Login</PageTitle>

<h3>Login</h3>
@if (ShowAuthError)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}
<EditForm Model="_userForAuthentication" OnValidSubmit="ExecuteLogin" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="username" class="col-md-2 col-form-label">Username:</label>
        <div class="col-md-10">
            <InputText id="username" class="form-control" @bind-Value="_userForAuthentication.UserName" />
            <ValidationMessage For="@(() => _userForAuthentication.UserName)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="password" class="col-md-2 col-form-label">Password:</label>
        <div class="col-md-10">
            <InputText type="password" id="password" class="form-control" @bind-Value="_userForAuthentication.Password" />
            <ValidationMessage For="@(() => _userForAuthentication.Password)" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Login</button>
        </div>
    </div>
</EditForm>

<div class="row">
    <div class="col-md-12 text-right">
        <button @onclick="LoginWithFacebook" type="submit" class="btn btn-primary" style="margin-top: 5px; margin-left: 16px">Login with facebook</button>
    </div>
</div>

@code {
    private static string tokenFace = "";
    private static Func<Task> getUserStatic;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        getUserStatic = getuser;
    }

    public async Task LoginWithFacebook()
    {
        await jsRunn.InvokeAsync<object>("fbLogin");
    }

    [JSInvokable("FbLoginProcessCallback")]
    public static async void FbLoginProcessCallback(object result)
    {
        try
        {
            JObject obj = JObject.Parse(result.ToString());
            tokenFace = obj["authResponse"]["accessToken"].ToString();

            await getUserStatic?.Invoke();
        }
        catch(Exception e)
        {
            Console.WriteLine("Facebook login cancelled. " + e);
        }
    }

    private async Task getuser()
    {
        if (tokenFace != null && tokenFace != "")
        {
            var userInfo = await httpClient.GetFromJsonAsync<FacebookUserInfo>($"https://graph.facebook.com/v12.0/me?access_token={tokenFace}&fields=name,email");
            Console.WriteLine(userInfo.Email);
            var resultIs = await _authService.LoginFacebook(new FacebookUserInfo{Email = userInfo.Email});
            if (!resultIs.IsAuthSuccessful)
            {
                Error = resultIs.ErrorMessage;
                ShowAuthError = true;
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            Console.WriteLine("Token is null");
        }
    }

 
}