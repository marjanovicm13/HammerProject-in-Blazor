@inject HttpClient HttpClient
@inject RefreshTokenService RefreshTokenService
@inject EmployeeStateContainerService employeeStateContainerService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRunn
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Security.Claims

<h4>Departments</h4>

<AuthorizeView>
    <Authorized>
            <div class="dropdown">
                <button @onclick="dropdownClick" class="dropbtn">Choose department name</button>
                <div id="myDropdown" class="dropdown-content">
                    <a href="#" @onclick='()=>departmentNameSave("Development")'>Development</a>
                <a href="#" @onclick='()=>departmentNameSave("Sales")'>Sales</a>
                </div>
            </div>
            <span>@departmentName</span>
            <br />
            <label for="dlocation">Department location:</label><br>
            <input type="text" id="dlocation" name="dname" @bind="departmentLocation"><br><br>
            <button @onclick="addDepartment" id="add" class="btn btn-dark" style="margin-top: -35px">Add new department</button>
    </Authorized>
    <NotAuthorized>
        The User is not authorized to add new departments or to update/delete current ones.
    </NotAuthorized>
</AuthorizeView>

@if (_departments == null)
{
    <p><em>Loading...</em></p>
}
else{
<table class="table">
  <thead class="thead-dark">
    <tr>
      <th scope="col">departmentNo</th>
      <th scope="col">departmentName</th>
      <th scope="col">departmentLocation</th>
    </tr>
  </thead>
  <tbody>

            @foreach (var department in _departments)
            {
                <tr>
                    <th scope="row">@department.departmentNo</th>
                    @if (department.updateClicked == false)
                    {
                        <td>@department.departmentName</td>
                        <td>@department.departmentLocation</td>
                        <AuthorizeView>
                            <Authorized>
                                <td><button class="btn btn-dark" @onclick="(() => department.updateClicked = true)">Update</button></td>
                                <td><button class="btn btn-dark" @onclick="@(() =>deleteDepartment(department.departmentNo))">Delete</button></td>
                            </Authorized>
                            <NotAuthorized>
                            </NotAuthorized>
                        </AuthorizeView>
                    }
                    else
                    {
                        <td><input type="text" class="updateInput" placeholder="@department.departmentName" @bind="@department.departmentName"></td>
                        <td><input type="text" class="updateInput" placeholder="@department.departmentLocation" @bind="@department.departmentLocation"></td>
                        <td><button class="btn btn-dark" @onclick="(()=> updateDepartment(department))">Submit</button></td>
                        <td><button class="btn btn-dark" @onclick="(() => department.updateClicked = false)">Cancel</button></td>
                    }
                </tr>
            }

  </tbody>
</table>
}

@if(cannotDeleteDepartment == true)
{
    <p>Cannot delete this department because employees are in it.</p>
}

@code {
    private List<department> departments = new List<department>();
    private List<DepartmentUpdate> _departments = new List<DepartmentUpdate>();
    private List<employee>? employees = new List<employee>();
    private Boolean cannotDeleteDepartment = false;

    private string? departmentName { get; set; }
    private string? departmentLocation { get; set; }

    private Boolean updateClicked = false;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();   
        try{
            await getDepartments();
        }
        catch(Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async void departmentNameSave(string name)
    {
        departmentName = name;
    }

    private async Task<List<DepartmentUpdate>> getDepartments()
    {
        departments = await HttpClient.GetFromJsonAsync<List<department>>("Department/getDepartments");
        foreach (var dep in departments)
        {
            DepartmentUpdate _dep = new DepartmentUpdate()
                {
                    departmentNo = dep.departmentNo,
                    departmentName = dep.departmentName,
                    departmentLocation = dep.departmentLocation,
                    updateClicked = false
                };
            _departments.Add(_dep);
        }
        return _departments;
    }

    private async void addDepartment()
    {
        department _department = new department()
        {
            departmentName = departmentName,
            departmentLocation = departmentLocation
        };
        Console.WriteLine(_department);

        var departmentToPost = JsonSerializer.Serialize(_department);
        var requestContent = new StringContent(departmentToPost, System.Text.Encoding.UTF8, "application/json");
        await RefreshTokenService.TryRefreshToken();
        var response = await HttpClient.PostAsync("Department", requestContent);
        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("/", true);
    }

    private async void deleteDepartment(int departmentNo)
    {
        employees = employeeStateContainerService.Value;
        foreach (var employee in employees)
        {
            if(departmentNo == employee.departmentNo)
            {
                Console.WriteLine("Cannot delete this department because employees are in it.");
                cannotDeleteDepartment = true;
                return;
            }
        }
        cannotDeleteDepartment = false;
        _departments.RemoveAll(x => x.departmentNo == departmentNo);
        await RefreshTokenService.TryRefreshToken();
        var response = await HttpClient.DeleteAsync("Department/" + departmentNo);
        response.EnsureSuccessStatusCode();
    }

    private async void updateDepartment(DepartmentUpdate departmentToUpdate)
    {
        foreach(var dep in _departments)
        {
            if(dep.departmentNo == departmentToUpdate.departmentNo)
            {
                dep.departmentLocation = departmentToUpdate.departmentLocation;
                dep.departmentName = departmentToUpdate.departmentName;
                dep.updateClicked = false;
            }
        }
        var departmentToPost = JsonSerializer.Serialize(departmentToUpdate);
        var requestContent = new StringContent(departmentToPost, System.Text.Encoding.UTF8, "application/json");

        await RefreshTokenService.TryRefreshToken();
        var response = await HttpClient.PutAsync("Department", requestContent);
        response.EnsureSuccessStatusCode();
    }

    private async void dropdownClick()
    {
        await jsRunn.InvokeAsync<object>("dropdownClick");
    }

}
  
